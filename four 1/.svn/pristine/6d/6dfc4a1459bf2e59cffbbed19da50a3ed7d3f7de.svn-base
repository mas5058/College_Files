# Title: Lab02 Solution - Fraction Operations.
# CPET-321 Computational Problem Solving II Fall 2016
# Platform: Python 2.7 PyCharm

import math
from time import time


def print_as_fraction(numerator, denominator):
    print (str(numerator)+"/"+str(denominator))


def print_as_decimal(numerator, denominator):
    print (float(numerator)/denominator)


def convert_fraction_to_rational(fraction):
    new_numerator = 1
    old_numerator = 0
    new_denominator = 0
    old_denominator = 1
    inverse_fraction_res = fraction
    precision = 0.000001

    while True:
        integral_part = math.floor(inverse_fraction_res)
        aux = new_numerator
        new_numerator = integral_part * new_numerator + old_numerator
        old_numerator = aux
        aux = new_denominator
        new_denominator = integral_part * new_denominator + old_denominator
        old_denominator = aux
        if inverse_fraction_res != integral_part:
            inverse_fraction_res = 1 / (inverse_fraction_res - integral_part)

        if not abs(fraction - new_numerator / new_denominator) > fraction * precision:
            break
    return str(new_numerator)+"/"+str(new_denominator)


def add_integers():
    integer_sum = 0
    i = 0
    while i <= 10000000:
        integer_sum += i*i
        i += 1


def add_floats():
    float_sum = 0
    i = 0.0
    while i <= 10000000.0:
        float_sum += float(i)*float(i)
        i += 1.0


def float_comparison():
    x = 3.3
    y = 2.0
    xy = x * y
    print ("x * y = ", xy)
    p = 2.2
    q = 3.0
    pq = p*q
    print ("p * y = ", pq)

    if xy == pq:
        print ("x * y and p * q are equal")
    else:
        print ("x * y and p * q are not equal")

# add methods for the following functionalities.
# 1. Rounding up a real number
# 2. Rounding down a real number
# 3. Calculating the integer power of a real number.


def main():
    m_numerator = input("Enter Numerator\n")
    m_denominator = 1
    while True:
        m_denominator = input("Enter Denominator\n")
        if m_denominator == 0:
            print ("Denominator cannot be zero\n", "Try again")
        else:
            break

    print ("Fraction is ")
    print_as_fraction(m_numerator, m_denominator)

    print ("Decimal value is ")
    print_as_decimal(m_numerator, m_denominator)

    print ("Convert Fraction to rational", convert_fraction_to_rational(1.5))
    x = math.pi
    print "Converting "+str(x)+" to approximate rational", convert_fraction_to_rational(x)

    start = time()
    add_integers()
    elapsed = time() - start
    print ("integer ", elapsed)

    start = time()
    add_floats()
    elapsed = time() - start
    print ("float", elapsed)
    float_comparison()

if __name__ == '__main__':
    main()
