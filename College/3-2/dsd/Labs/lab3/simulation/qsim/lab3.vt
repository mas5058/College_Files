// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/11/2016 10:14:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab3_vlg_sample_tst(
	a,
	b,
	b6,
	c,
	d,
	e,
	sampler_tx
);
input  a;
input  b;
input  b6;
input  c;
input  d;
input  e;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or b6 or c or d or e)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab3_vlg_check_tst (
	archf1,
	archf2,
	archf3,
	archl1,
	archl2,
	archl3,
	sampler_rx
);
input  archf1;
input  archf2;
input  archf3;
input  archl1;
input  archl2;
input  archl3;
input sampler_rx;

reg  archf1_expected;
reg  archf2_expected;
reg  archf3_expected;
reg  archl1_expected;
reg  archl2_expected;
reg  archl3_expected;

reg  archf1_prev;
reg  archf2_prev;
reg  archf3_prev;
reg  archl1_prev;
reg  archl2_prev;
reg  archl3_prev;

reg  archf1_expected_prev;
reg  archf2_expected_prev;
reg  archf3_expected_prev;
reg  archl1_expected_prev;
reg  archl2_expected_prev;
reg  archl3_expected_prev;

reg  last_archf1_exp;
reg  last_archf2_exp;
reg  last_archf3_exp;
reg  last_archl1_exp;
reg  last_archl2_exp;
reg  last_archl3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	archf1_prev = archf1;
	archf2_prev = archf2;
	archf3_prev = archf3;
	archl1_prev = archl1;
	archl2_prev = archl2;
	archl3_prev = archl3;
end

// update expected /o prevs

always @(trigger)
begin
	archf1_expected_prev = archf1_expected;
	archf2_expected_prev = archf2_expected;
	archf3_expected_prev = archf3_expected;
	archl1_expected_prev = archl1_expected;
	archl2_expected_prev = archl2_expected;
	archl3_expected_prev = archl3_expected;
end



// expected archf1
initial
begin
	archf1_expected = 1'bX;
end 

// expected archf2
initial
begin
	archf2_expected = 1'bX;
end 

// expected archf3
initial
begin
	archf3_expected = 1'bX;
end 

// expected archl1
initial
begin
	archl1_expected = 1'bX;
end 

// expected archl2
initial
begin
	archl2_expected = 1'bX;
end 

// expected archl3
initial
begin
	archl3_expected = 1'bX;
end 
// generate trigger
always @(archf1_expected or archf1 or archf2_expected or archf2 or archf3_expected or archf3 or archl1_expected or archl1 or archl2_expected or archl2 or archl3_expected or archl3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected archf1 = %b | expected archf2 = %b | expected archf3 = %b | expected archl1 = %b | expected archl2 = %b | expected archl3 = %b | ",archf1_expected_prev,archf2_expected_prev,archf3_expected_prev,archl1_expected_prev,archl2_expected_prev,archl3_expected_prev);
	$display("| real archf1 = %b | real archf2 = %b | real archf3 = %b | real archl1 = %b | real archl2 = %b | real archl3 = %b | ",archf1_prev,archf2_prev,archf3_prev,archl1_prev,archl2_prev,archl3_prev);
`endif
	if (
		( archf1_expected_prev !== 1'bx ) && ( archf1_prev !== archf1_expected_prev )
		&& ((archf1_expected_prev !== last_archf1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port archf1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", archf1_expected_prev);
		$display ("     Real value = %b", archf1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_archf1_exp = archf1_expected_prev;
	end
	if (
		( archf2_expected_prev !== 1'bx ) && ( archf2_prev !== archf2_expected_prev )
		&& ((archf2_expected_prev !== last_archf2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port archf2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", archf2_expected_prev);
		$display ("     Real value = %b", archf2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_archf2_exp = archf2_expected_prev;
	end
	if (
		( archf3_expected_prev !== 1'bx ) && ( archf3_prev !== archf3_expected_prev )
		&& ((archf3_expected_prev !== last_archf3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port archf3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", archf3_expected_prev);
		$display ("     Real value = %b", archf3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_archf3_exp = archf3_expected_prev;
	end
	if (
		( archl1_expected_prev !== 1'bx ) && ( archl1_prev !== archl1_expected_prev )
		&& ((archl1_expected_prev !== last_archl1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port archl1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", archl1_expected_prev);
		$display ("     Real value = %b", archl1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_archl1_exp = archl1_expected_prev;
	end
	if (
		( archl2_expected_prev !== 1'bx ) && ( archl2_prev !== archl2_expected_prev )
		&& ((archl2_expected_prev !== last_archl2_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port archl2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", archl2_expected_prev);
		$display ("     Real value = %b", archl2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_archl2_exp = archl2_expected_prev;
	end
	if (
		( archl3_expected_prev !== 1'bx ) && ( archl3_prev !== archl3_expected_prev )
		&& ((archl3_expected_prev !== last_archl3_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port archl3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", archl3_expected_prev);
		$display ("     Real value = %b", archl3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_archl3_exp = archl3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#600000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
reg b6;
reg c;
reg d;
reg e;
// wires                                               
wire archf1;
wire archf2;
wire archf3;
wire archl1;
wire archl2;
wire archl3;

wire sampler;                             

// assign statements (if any)                          
lab3 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.archf1(archf1),
	.archf2(archf2),
	.archf3(archf3),
	.archl1(archl1),
	.archl2(archl2),
	.archl3(archl3),
	.b(b),
	.b6(b6),
	.c(c),
	.d(d),
	.e(e)
);

// b6
always
begin
	b6 = 1'b0;
	b6 = #150000 1'b1;
	#150000;
end 

// a
always
begin
	a = 1'b0;
	a = #75000 1'b1;
	#75000;
end 

// b
always
begin
	b = 1'b0;
	b = #37500 1'b1;
	#37500;
end 

// c
initial
begin
	repeat(15)
	begin
		c = 1'b0;
		c = #19000 1'b1;
		# 19000;
	end
	c = 1'b0;
	c = #19000 1'b1;
end 

// d
initial
begin
	repeat(31)
	begin
		d = 1'b0;
		d = #9500 1'b1;
		# 9500;
	end
	d = 1'b0;
	d = #9500 1'b1;
end 

// e
always
begin
	e = 1'b0;
	e = #5000 1'b1;
	#5000;
end 

lab3_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.b6(b6),
	.c(c),
	.d(d),
	.e(e),
	.sampler_tx(sampler)
);

lab3_vlg_check_tst tb_out(
	.archf1(archf1),
	.archf2(archf2),
	.archf3(archf3),
	.archl1(archl1),
	.archl2(archl2),
	.archl3(archl3),
	.sampler_rx(sampler)
);
endmodule

